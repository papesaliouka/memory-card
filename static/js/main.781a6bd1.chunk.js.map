{"version":3,"sources":["header/header.js","card/card.js","card-list/cardList.js","score/score.js","score/best.score.js","utils/utils.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Card","name","id","increment","track","clicked","onClick","e","src","alt","CardList","cardArray","style","map","card","Score","score","BestScore","bestScore","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","App","useState","setCardArray","setScore","setBestScrore","useEffect","fetch","then","response","json","data","shuffleArray","target","prevScore","prevBestScore","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKAQeA,EANA,WACX,OACI,oBAAIC,UAAU,wBAAd,+BCMOC,EARF,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,UAAWC,EAAS,EAATA,MAChC,OACI,sBAAKL,UAAU,qCAAqCM,QAAQ,QAAQC,QAAS,SAACC,GAAMJ,EAAUI,GAAGH,KAAjG,UACI,qBAAKI,IAAG,+BAA0BN,EAA1B,8CAA0EO,IAAI,OAAOJ,QAAQ,UACrG,mBAAGA,QAAQ,QAAX,SAAqBJ,QCSlBS,EAVE,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,UAAWR,EAAoB,EAApBA,UAAWC,EAAS,EAATA,MACrC,OACI,qBAAKQ,MAAO,CAAC,QAAW,OAAQ,cAAiB,MAAO,eAAmB,SAAU,SAAY,QAAjG,SAEQD,EAAUE,KAAI,SAAAC,GAAI,OAAG,cAAC,EAAD,CAAMb,KAAMa,EAAKb,KAAMC,GAAIY,EAAKZ,GAAkBC,UAAWA,EAAWC,MAAOA,GAAtCU,EAAKZ,UCHpEa,EANH,SAAC,GAAW,IAAVC,EAAS,EAATA,MACV,OACI,oBAAGjB,UAAU,UAAb,oBAAgCiB,MCIzBC,EANC,SAAC,GAAe,IAAdC,EAAa,EAAbA,UACd,OACI,oBAAGnB,UAAU,SAAb,yBAAmCmB,M,MCgB5BC,MAlBf,SAAiBC,GAIf,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAMI,OAGlB,IAAMD,GAGXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEvB,OAAOD,GCmBMQ,EAzBH,WACT,MAAkCC,mBAAS,IAA3C,mBAAOlB,EAAP,KAAkBmB,EAAlB,KACA,EAA0BD,mBAAS,GAAnC,mBAAOb,EAAP,KAAce,EAAd,KACA,EAAmCF,mBAAS,GAA5C,mBAAOX,EAAP,KAAkBc,EAAlB,KAEAC,qBAAU,WACTC,MAFW,8CAGVC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAI,OAAIR,EAAaS,EAAaD,SACvC,CAACtB,IAKF,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,CAAOA,MAAOA,IACd,cAAC,EAAD,CAAWE,UAAWA,IACtB,cAAC,EAAD,CAAUP,UAAWA,EAAWR,UARtB,SAACI,GAAD,OAAMA,EAAEiC,OAAOnC,SAAW0B,EAAS,GAAIxB,EAAEiC,OAAOnC,QAAQ,UAAc0B,GAAS,SAAAU,GAAS,OAAGA,EAAY,KAAKlC,EAAEiC,OAAOnC,QAAU,SAQnFD,MAPhD,kBAAK4B,GAAc,SAAAU,GAAa,OAAI1B,IAASE,EAAYwB,EAAe,EAAIA,YCT/EC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.781a6bd1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = ()=>{\n    return(\n        <h1 className='tc bg-light-red white'>Test Your Memory</h1>\n    );\n}\n\nexport default Header","import React from 'react';\n\nconst Card = ({name, id, increment, track})=>{\n    return(\n        <div className='bg-light-green tc br2 ma3 dib grow' clicked='false' onClick={(e)=> {increment(e);track()}}  >\n            <img src={`https://robohash.org/${id}/620050a4db5104bae758cd75171d64ca?set=set4`} alt=\"cats\" clicked='false' />\n            <p clicked='false' >{name}</p>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from '../card/card'\n\n\n\nconst CardList = ({cardArray, increment, track})=>{\n    return(\n        <div style={{'display': 'flex', 'flexDirection' :'row', 'justifyContent' : 'center', 'flexWrap': 'wrap'}}>\n            {\n                cardArray.map(card=> <Card name={card.name} id={card.id} key={card.id} increment={increment} track={track}  />)\n            }\n        </div>\n    );\n}\n\nexport default CardList","const Score=({score})=>{\n    return(\n        <p className='blue tc' > Score {score}</p>\n    )\n}\n\nexport default Score","const BestScore=({bestScore})=>{\n    return(\n        <p className='red tc'> Best Score {bestScore}</p>\n    )\n}\n\nexport default BestScore","function shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n  return array;\n}\n\nexport default shuffle","import React, {useState, useEffect} from 'react';\nimport Header from './header/header';\nimport CardList from './card-list/cardList';\nimport Score from './score/score'\nimport BestScore from './score/best.score'\nimport 'tachyons';\nimport shuffleArray from './utils/utils'\n\n\nconst App = ()=>{\n   const [cardArray, setCardArray] = useState([])\n   const [score, setScore] = useState(0)\n   const [bestScore, setBestScrore] = useState(0);\n   const url = 'https://jsonplaceholder.typicode.com/users'\n   useEffect(()=>{\n    fetch(url)\n    .then(response=> response.json())\n    .then(data => setCardArray(shuffleArray(data)))\n   },[score]);\n\n    const increment = (e)=> e.target.clicked ? (setScore(0), e.target.clicked='false' ) : ( setScore(prevScore=> prevScore + 1) , e.target.clicked = 'true');\n    const track = ()=> setBestScrore(prevBestScore => score=== bestScore ? prevBestScore +1 : prevBestScore )\n    \n    return(\n        <div>\n            <Header/>\n            <Score score={score}/>\n            <BestScore bestScore={bestScore}/>\n            <CardList cardArray={cardArray} increment={increment} track={track} />\n        </div>\n    );\n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}